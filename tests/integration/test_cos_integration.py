#!/usr/bin/env python3
# Copyright 2024 Canonical Ltd.
# See LICENSE file for licensing details.

import asyncio
import inspect
import logging
import os
import subprocess
from pathlib import Path

import pytest
from juju.controller import Controller
from pytest_operator.plugin import OpsTest
from utils import get_or_add_model

logger = logging.getLogger(__name__)


def get_this_script_dir() -> Path:
    filename = inspect.getframeinfo(inspect.currentframe()).filename  # type: ignore[arg-type]
    path = os.path.dirname(os.path.abspath(filename))
    return Path(path)


@pytest.mark.abort_on_fail
async def test_setup_and_deploy(ops_test: OpsTest, series, channel):
    """Setup models and then deploy Hardware Observer and COS."""
    lxd_ctl_name = os.environ["LXD_CONTROLLER"]
    k8s_ctl_name = os.environ["K8S_CONTROLLER"]

    # The current model name is generated by pytest-operator from the test name + random suffix.
    # Use the same model name in both controllers.
    k8s_mdl_name = lxd_mdl_name = ops_test.model_name

    # Assuming a lxd controller is ready and its name is stored in $LXD_CONTROLLER.
    lxd_ctl = Controller()
    await lxd_ctl.connect(lxd_ctl_name)
    lxd_mdl = await get_or_add_model(ops_test, lxd_ctl, lxd_mdl_name)
    await lxd_mdl.set_config({"logging-config": "<root>=WARNING; unit=DEBUG"})

    # Assuming a k8s controller is ready and its name is stored in $K8S_CONTROLLER.
    k8s_ctl = Controller()
    await k8s_ctl.connect(k8s_ctl_name)
    k8s_mdl = await get_or_add_model(ops_test, k8s_ctl, k8s_mdl_name)
    await k8s_mdl.set_config({"logging-config": "<root>=WARNING; unit=DEBUG"})

    await _deploy_cos(ops_test, series, channel, k8s_ctl, k8s_mdl)

    await _deploy_hardware_observer(ops_test, series, channel, lxd_mdl)

    await _add_cross_controller_relations(ops_test, series, channel, k8s_ctl, k8s_mdl, lxd_mdl)


async def _deploy_cos(ops_test, series, channel, k8s_ctl, k8s_mdl):
    cmd = [
        "juju",
        "deploy",
        "cos-lite",
        "--channel",
        channel,
        "--trust",
        "-m",
        f"{k8s_ctl.controller_name}:{k8s_mdl.name}",
        "--overlay",
        str(get_this_script_dir() / "offers-overlay.yaml"),
    ]
    subprocess.run(cmd, check=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)


async def _deploy_hardware_observer(ops_test, series, channel, lxd_mdl):
    await asyncio.gather(
        # Principal Ubuntu
        lxd_mdl.deploy(
            "ubuntu",
            num_units=1,
            series=series,
            channel=channel,
        ),
        # Hardware Observer
        lxd_mdl.deploy("hardware-observer", series=series, num_units=0, channel=channel),
        # Grafana Agent
        lxd_mdl.deploy(
            "grafana-agent",
            num_units=0,
            series=series,
            channel=channel,
        ),
    )

    await lxd_mdl.add_relation("ubuntu:juju-info", "hardware-observer:general-info")
    await lxd_mdl.add_relation("hardware-observer:cos-agent", "grafana-agent:cos-agent")
    await lxd_mdl.add_relation("ubuntu:juju-info", "grafana-agent:juju-info")
    await lxd_mdl.block_until(lambda: len(lxd_mdl.applications["hardware-observer"].units) > 0)


async def _add_cross_controller_relations(ops_test, series, channel, k8s_ctl, k8s_mdl, lxd_mdl):
    # The consumed endpoint names must match offers-overlay.yaml.
    await asyncio.gather(
        lxd_mdl.consume(
            f"admin/{k8s_mdl.name}.prometheus-receive-remote-write",
            application_alias="prometheus",
            controller_name=k8s_ctl.controller_name,
        ),
        lxd_mdl.consume(
            f"admin/{k8s_mdl.name}.loki-logging",
            application_alias="loki",
            controller_name=k8s_ctl.controller_name,
        ),
        lxd_mdl.consume(
            f"admin/{k8s_mdl.name}.grafana-dashboards",
            application_alias="grafana",
            controller_name=k8s_ctl.controller_name,
        ),
    )

    await asyncio.gather(
        lxd_mdl.add_relation("grafana-agent", "prometheus"),
        lxd_mdl.add_relation("grafana-agent", "loki"),
        lxd_mdl.add_relation("grafana-agent", "grafana"),
    )

    # `idle_period` needs to be greater than the scrape interval to make sure metrics ingested.
    await asyncio.gather(
        # First, we wait for the critical phase to pass with raise_on_error=False.
        # (In CI, using github runners, we often see unreproducible hook failures.)
        lxd_mdl.wait_for_idle(timeout=1800, idle_period=180, raise_on_error=False),
        k8s_mdl.wait_for_idle(timeout=1800, idle_period=180, raise_on_error=False),
    )

    await asyncio.gather(
        # Then we wait for "active", without raise_on_error=False, so the test fails sooner in case
        # there is a persistent error status.
        lxd_mdl.wait_for_idle(status="active", timeout=7200, idle_period=180),
        k8s_mdl.wait_for_idle(status="active", timeout=7200, idle_period=180),
    )
